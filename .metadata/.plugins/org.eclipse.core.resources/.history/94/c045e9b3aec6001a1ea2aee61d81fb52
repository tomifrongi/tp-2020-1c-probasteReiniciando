#include "bloque_handler.h"

int blocks_ocupados(char* value) //bloques ocupados
{
    int tamanio = string_length(value);
    return get_blocks(tamanio);
}

int obtener_blocks(int tamanio) //obtener bloques
{
    // Redondea hacia arriba
    return 1 + ((tamanio - 1) / metadata.block_size);
}

void escribir_blocks(char* value, t_list* bloques) //escribir bloques
{

    int limite = string_length(value);
    char* valorAGuardar = string_duplicate(value);

    for(int i = 0; i < list_size(bloques) && limite > 0; i++)
    {
        char* pathBloque = obtenerPathDelNumeroDeBloque((int) list_get(bloques, i));

        FILE * bloque = fopen(pathBloque, "w+");

        int limiteSuperior;

        if(limite >= metadata.block_size)
        {
            limiteSuperior = metadata.block_size;
        }
        else
        {
            limiteSuperior = limite;
        }

        char* take = string_substring(valorAGuardar, 0, limiteSuperior);

        int write = fwrite(take,1,limiteSuperior,bloque);
         limite -= string_length(take);

        if(limite > 0)
        {
            valorAGuardar = string_substring_from(valorAGuardar, limiteSuperior);
        }

        fclose(bloque);
        free(pathBloque);
        free(take);
    }

    free(valorAGuardar);
}

// Dado una lista de bloques t_list 1,2,3 se leen los contenidos de dichos bloques
// y se retorna una lista con los contenidos leidos 
// t_list(int) => t_list (blockLine)
// is_break determina si el contenido fue partido en otro bloque (si es que al grabar no entro todo el contenido y el \n esta en el bloque siguiente)

t_list* leer_pokemons(t_list* blocks)
{
	t_list* retList = list_create();
	size_t len = 0;
	char* line = NULL;
	ssize_t read;
	FILE* blockFile;
	int isBreakFile = 0;
	char* previousLastLine = string_new();

	for (int i = 0; i < list_size(blocks); i++)
	{
		char* blockPath = string_new();
        string_append(&blockPath, struct_paths[BLOCKS]);
        string_append(&blockPath, string_itoa(list_get(blocks, i)));
		string_append(&blockPath, ".bin");

		blockFile = fopen(blockPath, "r");

		if (blockFile == NULL)
		{
			log_error(blockFile, "No ha sido posible leer el archivo");
		}

		while((read = getline(&line, &len, blockFile)) != -1) {
			blockLine* blockLine;
			if(string_contains(line, "\n") == 0) {
				isBreakFile = 1;
				string_append(&previousLastLine, line);
			} else if(isBreakFile == 1) {
				string_append(&previousLastLine, line);
				blockLine = formatStringToBlockLine(previousLastLine);
				isBreakFile = 0;
				previousLastLine = string_new();
				list_add(retList, blockLine);
			} else {
				blockLine = formatStringToBlockLine(line);
				list_add(retList, blockLine);
			}
		}

		free(blockPath);
	}

	fclose(blockFile);
	if (line) free(line);


	return retList;
}

// Dado un string con formato [1,2,3,...] se devuelve una lista con los enteros que simbolizan un numero de bloque
t_list* string_blocks_list(char* blocks)
{
	t_list* retList = list_create();
	// Solo esta usando un bloque
	if (strlen(blocks) <= 3) {
		char* blockStrWithoutBraces = string_substring(blocks, 1, 1);
		list_add(retList, atoi(blockStrWithoutBraces));
	} // Mas de un bloque siendo usado
	else {
		char* blocksStrWithoutBraces = string_substring(blocks, 1, strlen(blocks) - 2);
		char** blocksWithoutCommaSeparator = string_split(blocksStrWithoutBraces, ",");
		int i = 0;
		while(blocksWithoutCommaSeparator[i] != NULL) {
			list_add(retList, atoi(blocksWithoutCommaSeparator[i]));
			i++;
		}
	}

	return retList;
}

// Dado una linea con formato "1-1=100/n" se devuelve la estructura correspondiente para poder manipularla
blockLine* estructura_block_line(char* blockline)
{
	blockLine* newLineBlock = malloc(sizeof(blockLine));
	char** splittedLine = string_split(blockline, "=");
	char** coordinates = string_split(splittedLine[0], "-");
	newLineBlock->posX = atoi(coordinates[0]);
	newLineBlock->posY = atoi(coordinates[1]);
	newLineBlock->cantidad = atoi(splittedLine[1]);
	return newLineBlock;
}

// Formatea una lista de blockLines al string final que se va escribir "1-3=10\n1-3=50\n"
char* block_lines_string(t_list* pokemonLines)
{
	char* retChar = string_new();
	for(int j=0; j<list_size(pokemonLines); j++) {
		blockLine* newLineBlock = list_get(pokemonLines, j);
		string_append(&retChar, formatToBlockLine(newLineBlock->posX, newLineBlock->posY, newLineBlock->cantidad));
	}
	return retChar;
}

// Formatea unas coordenadas y cantidad a "1-1=100" string
char* formatear_block_lines(int intPosX, int intPosY, int intCantidad)
{
	char* pokemonPerPosition = string_new();
	char* posX = string_itoa(intPosX);
	char* posY = string_itoa(intPosY);
	char* cantidad = string_itoa(intCantidad);
	
	string_append(&pokemonPerPosition, posX);
	string_append(&pokemonPerPosition, "-");
	string_append(&pokemonPerPosition, posY);
	string_append(&pokemonPerPosition, "=");
	string_append(&pokemonPerPosition, cantidad);
	string_append(&pokemonPerPosition, "\n");

	free(posX);
	free(posY);
	free(cantidad);
	return pokemonPerPosition;
}

blockLine* crear_block_line(int intPosX, int intPosY, int intCantidad)
{
	blockLine* newLineBlock = malloc(sizeof(blockLine));
	newLineBlock->posX = intPosX;
	newLineBlock->posY = intPosY;
	newLineBlock->cantidad = intCantidad;
	return newLineBlock;
}

void mostrar_lista_pokemons(t_list* pokemonLines)
{
	gamecard_logger_info("Size lista %d:", list_size(pokemonLines));
	for (int i=0; i<list_size(pokemonLines); i++) {
		blockLine* newLineBlock = list_get(pokemonLines, i);
		gamecard_logger_info("Elemento i %d:", i);
		gamecard_logger_info("Linea del Pokemon %s:", formatToBlockLine(newLineBlock->posX, newLineBlock->posY, newLineBlock->cantidad));
	}
}

//Chequea si el string a escribir entra en los bloques
bool entra_en_blocks(char* stringToWrite, t_list* listBlocks)
{
	int stringToWriteSize = strlen(stringToWrite);
	int spaceToAllocateString = list_size(listBlocks) * metadata.block_size;
	return stringToWriteSize <= spaceToAllocateString;
}
