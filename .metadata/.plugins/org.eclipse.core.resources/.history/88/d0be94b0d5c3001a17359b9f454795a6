#include "gm_filesystem.h"

void gamecardfsCreateStructs() //Estructuras del File System
{
	createRootFiles();
	setupMetadata();
	initSemaphore();
}

void initSemaphore() //inicio semaforo
{
	pthread_mutex_init(&MUTEX_METADATA, NULL);
}

int createRecursiveDirectory(const char* path)
{
	char* completePath = string_new();
	char* newDirectoryMetadata = string_new();
	char* super_path = (char*) malloc(strlen(path) +1);
	char* nombre = (char*) malloc(strlen(path)+1);

	string_append(&completePath, struct_paths[TALL_GRASS]);
	string_append(&completePath, path);

	if(access(completePath, F_OK) != -1)
	{
        gamecard_logger_info("Existe el path %s", completePath);
		return -1;
    }
	else
    {
        gamecard_logger_info("No existe el path %s", completePath);
		split_path(path, &super_path, &nombre);
		
		createRecursiveDirectory(super_path);

		string_append(&newDirectoryMetadata, completePath);
		string_append(&newDirectoryMetadata, "Metadata.bin");

		mkdir(completePath, 0777);
		FILE* metadata = fopen(newDirectoryMetadata, "w+b");
		config_metadata = config_create(newDirectoryMetadata);
		config_set_value(config_metadata, "DIRECTORY", "Y");
		config_save(config_metadata);
		config_destroy(config_metadata);
		fclose(metadata);
		return 0;
    };

	free(completePath);
	free(newDirectoryMetadata);
	free(super_path);
	free(nombre);
	return 0;
}

int createFile(const char* fullPath) {
	char* completePath = string_new();
	string_append(&completePath, struct_paths[FILES]);
	string_append(&completePath, fullPath);

	if(access(completePath, F_OK) != -1) {
        gamecard_logger_info("Existe el directory para ese pokemon %s", completePath);
		return -1;
    } else {
		mkdir(completePath, 0777);
		updatePokemonMetadata(fullPath, "N", "0", "[]", "Y");
	}

	free(completePath);
}

void updatePokemonMetadata(const char* fullPath, const char* directory, const char* size, const char* blocks, const char* open) {
	char* completePath = string_new();
	char* newDirectoryMetadata = string_new();
	string_append(&completePath, struct_paths[FILES]);
	string_append(&completePath, fullPath);

	string_append(&newDirectoryMetadata, completePath);
	string_append(&newDirectoryMetadata, "/Metadata.bin");
	
	FILE* metadata = fopen(newDirectoryMetadata, "w+b");
	config_metadata = config_create(newDirectoryMetadata);
	config_set_value(config_metadata, "DIRECTORY", directory);
	config_set_value(config_metadata, "SIZE", size);
	config_set_value(config_metadata, "BLOCKS", blocks);
	config_set_value(config_metadata, "OPEN", open);
	config_save(config_metadata);
	
	config_destroy(config_metadata);
	fclose(metadata);
	free(completePath);
	free(newDirectoryMetadata);
}

void updateOpenFileState(const char* fullPath, const char* open) {
	char* completePath = string_new();
	char* newDirectoryMetadata = string_new();
	char* blockSize = string_new();
	char* blocks = string_new();

	string_append(&completePath, struct_paths[FILES]);
	string_append(&completePath, fullPath);
	string_append(&newDirectoryMetadata, completePath);
	string_append(&newDirectoryMetadata, "/Metadata.bin");


	t_config* readMetadataFile = config_create(newDirectoryMetadata);
	blockSize = string_duplicate(config_get_string_value(readMetadataFile, "SIZE"));
	blocks = string_duplicate(config_get_string_value(readMetadataFile, "BLOCKS"));
	
	FILE* metadata = fopen(newDirectoryMetadata, "w+b");
	config_metadata = config_create(newDirectoryMetadata);
	config_set_value(config_metadata, "SIZE", blockSize);
	config_set_value(config_metadata, "DIRECTORY", "N");
	config_set_value(config_metadata, "BLOCKS", blocks);
	config_set_value(config_metadata, "OPEN", open);
	config_save(config_metadata);
	

	config_destroy(config_metadata);
	fclose(metadata);
	config_destroy(readMetadataFile);
	
	free(completePath);
	free(newDirectoryMetadata);
	free(blockSize);
	free(blocks);
}

int coordinateExists(unsigned int posX, unsigned int posY, t_list* pokemonLines) {
	int coordinateExist = 0;

	for (int i=0; i<list_size(pokemonLines); i++) {
		blockLine* newLineBlock = list_get(pokemonLines, i);

		if (newLineBlock->posX == posX && newLineBlock->posY == posY) {
			coordinateExist = 1;
		}
	}
	
	return coordinateExist;
}

// Add pokemon total if coordinate exists
void addTotalPokemonIfCoordinateExist(new_pokemon* newPokemon, t_list* pokemonLines) {
	for (int i=0; i<list_size(pokemonLines); i++) {
		blockLine* pokemonLineBlock = list_get(pokemonLines, i);
		if (pokemonLineBlock->posX == newPokemon->posicionEjeX && pokemonLineBlock->posY == newPokemon->posicionEjeY) {
			pokemonLineBlock->cantidad = pokemonLineBlock->cantidad + newPokemon->cantidad;
		}
	}
}

// Delete pokemon total if coordinate exists
void deletePokemonTotalIfCoordinateExist(catch_pokemon* catchPokemon, t_list* pokemonLines) {
	for (int i=0; i<list_size(pokemonLines); i++) {
		blockLine* pokemonLineBlock = list_get(pokemonLines, i);
		if (pokemonLineBlock->posX == catchPokemon->posicionEjeX && pokemonLineBlock->posY == catchPokemon->posicionEjeY) {
			if (pokemonLineBlock->cantidad != 1) {
				pokemonLineBlock->cantidad = pokemonLineBlock->cantidad - 1;	
			} else {
				list_remove(pokemonLines, i);
			}
		}
	}
}

t_list* requestFreeBlocks(int extraBlocksNeeded) {
	t_list* retList = list_create();
	for (int i=0; i<extraBlocksNeeded; i++) {
		int freeBlockPosition = getAndSetFreeBlock(bitmap, metadata.blocks);
		list_add(retList, freeBlockPosition);
	}
	return retList;
}

// Formatea una lista de enteros a un string con formato [1, 2, 3] requerido por el Metadata
char* formatToMetadataBlocks(t_list* blocks) {
	char* retBlocks = string_new();
	string_append(&retBlocks, "[");

	if (list_size(blocks) > 1) {
		for(int i=0; i<list_size(blocks); i++) {
			string_append(&retBlocks, string_itoa(list_get(blocks, i)));
			if (i != (list_size(blocks) - 1)) string_append(&retBlocks, ",");
		}
	} 
	
	if (list_size(blocks) == 1) {
		string_append(&retBlocks, string_itoa(list_get(blocks, 0)));
	}

	string_append(&retBlocks, "]");
	return retBlocks;
}

void gcfsFreeBitmaps() {
	free(bitmap->bitarray);
	bitarray_destroy(bitmap);
}


void freeBlockLine(blockLine* newLineBlock) {
	free(newLineBlock);
}


void createNewPokemon(new_pokemon* newPokemon)
{
	game_card_logger_info("New Pokemon: %s", newPokemon->nombrePokemon);
	char* completePath = string_new();
	string_append(&completePath, struct_paths[FILES]);
	string_append(&completePath, newPokemon->nombrePokemon);
	int freeBlocks = getFreeBlocks(metadata.blocks, bitmap);

	// Existe Pokemon
	if (access(completePath, F_OK) != -1) {
		game_card_logger_info("Pokemon existe dentro del FS!.");
		operateNewPokemonFile(newPokemon, completePath, freeBlocks);
	} else {
		game_card_logger_info("No existe ese Pokemon. Se crean y escriben las estructuras.");
		char* super_path = (char*) malloc(strlen(newPokemon->nombrePokemon) +1);
		char* pokemonDirectory = (char*) malloc(strlen(newPokemon->nombrePokemon)+1);
	
		if (string_contains(newPokemon->nombrePokemon, "/")) {
	    	split_path(newPokemon->nombrePokemon, &super_path, &pokemonDirectory);
			char* filePath = string_new();
			string_append(&filePath, "Files/");
			string_append(&filePath, super_path);
			createRecursiveDirectory(filePath);
			free(filePath);
		}

		createFile(newPokemon->nombrePokemon);

		char* pokemonPerPosition = formatToBlockLine(newPokemon->posicionEjeX, newPokemon->posicionEjeY, newPokemon->cantidad);
		int pokemonPerPositionLength = strlen(pokemonPerPosition);

		// Necesito 1 solo bloque
		if(metadata.block_size >= pokemonPerPositionLength)
		{
		  
		  int blocksRequired = cuantosBloquesOcupa(pokemonPerPosition);

		  if (freeBlocks > blocksRequired)
		  {
			int freeBlockPosition = getAndSetFreeBlock(bitmap, metadata.blocks);
			t_list* freeBlocks = list_create();
			list_add(freeBlocks, freeBlockPosition);
			char* metadataBlocks = formatToMetadataBlocks(freeBlocks);
			char* stringLength = string_itoa(pokemonPerPositionLength);
			
			char* pathBloque = obtenerPathDelNumeroDeBloque(freeBlockPosition);
			FILE* blockFile = fopen(pathBloque,"wr");
			fwrite(pokemonPerPosition, 1 , pokemonPerPositionLength, blockFile);
			updatePokemonMetadata(newPokemon->nombrePokemon, "N", stringLength, metadataBlocks, "N");
			game_card_logger_info("Operacion NEW_POKEMON terminada correctamente");
			
			fclose(blockFile);
			free(metadataBlocks);
			free(stringLength);
			free(pathBloque);
			list_destroy(freeBlocks);

		  }
		  else
		  {
			gamecard_logger_error("No hay bloques disponibles. No se puede hacer la operacion");
		  }
		}
		else if(metadata.block_size < pokemonPerPositionLength)
		{
		  
		  t_list* pokemonLines = list_create();
		  blockLine* newNode = createBlockLine(newPokemon->posicionEjeX, newPokemon->posicionEjeY, newPokemon->cantidad);
		  list_add(pokemonLines, newNode);

		  char* stringToWrite = formatListToStringLine(pokemonLines);
		  int blocksRequired = cuantosBloquesOcupa(stringToWrite);

		  if (freeBlocks > blocksRequired)
		  {
			char* stringLength = string_itoa(strlen(stringToWrite));
			t_list* listBlocks = requestFreeBlocks(blocksRequired);
			writeBlocks(stringToWrite, listBlocks);
			char* metadataBlocks = formatToMetadataBlocks(listBlocks);
			updatePokemonMetadata(newPokemon->nombrePokemon, "N", stringLength, metadataBlocks, "N");
			game_card_logger_info("Operacion NEW_POKEMON terminada correctamente");

			list_destroy(listBlocks);
			free(metadataBlocks);
		  }
		  else
		  {
			  gamecard_logger_error("No hay bloques disponibles. No se puede hacer la operacion");
		  }
		  
		  list_destroy_and_destroy_elements(pokemonLines, freeBlockLine);
		  free(stringToWrite);
	  	}

		free(super_path);
		free(pokemonDirectory);
		free(pokemonPerPosition);
	}
	
	free(completePath);
}

int catchAPokemon(catch_pokemon* catchPokemon)
{
	gamecard_logger_info("Catch Pokemon: %s", catchPokemon->nombrePokemon);
	char* completePath = string_new();
	int res;
	string_append(&completePath, struct_paths[FILES]);
	string_append(&completePath, catchPokemon->nombrePokemon);

	if (access(completePath, F_OK) != -1)
	{
		gamecard_logger_info("Existe el pokemon, se leen las estructuras");
		res = operateCatchPokemonFile(catchPokemon, completePath);
	}
	else
	{
		gamecard_logger_error("No existe ese Pokemon en el filesystem.");
	}

	free(completePath);

	return res;
}



t_list* getAPokemon(get_pokemon* getPokemon)
{
	log_info("Get Pokemon: %s", getPokemon->nombrePokemon);
	char* completePath = string_new();
	string_append(&completePath, struct_paths[FILES]);
	string_append(&completePath, getPokemon->nombrePokemon);
	t_list* res;

	if (access(completePath, F_OK) != -1)
	{
		log_info("Existe el pokemon, se leen las estructuras");
		res = operateGetPokemonFile(getPokemon, completePath);
	}
	else
	{
		gamecard_logger_error("No existe ese Pokemon en el filesystem.");
	}

	free(completePath);
	return res;
}

void operateNewPokemonFile(new_pokemon* newPokemon, char* completePath, int freeBlocks) {
	pokemonMetadata pokemonMetadata = readPokemonMetadata(completePath);

	if(string_equals_ignore_case(pokemonMetadata.isOpen, "N")) {
		log_info("El archivo no esta abierto por ningun proceso, se procede a abrir el mismo.");
		
		pthread_mutex_lock(&MUTEX_METADATA);
		updateOpenFileState(newPokemon->nombrePokemon, "Y");
		pthread_mutex_unlock(&MUTEX_METADATA);
		
		t_list* listBlocks = stringBlocksToList(pokemonMetadata.blocks);
		t_list* pokemonLines = readPokemonLines(listBlocks);
		if (coordinateExists(newPokemon->posicionEjeX, newPokemon->posicionEjeY, pokemonLines) == 1)
		{
			addTotalPokemonIfCoordinateExist(newPokemon, pokemonLines);
		}
		else
		{
			blockLine* newNode = createBlockLine(newPokemon->posicionEjeX, newPokemon->posicionEjeY, newPokemon->cantidad);
			list_add(pokemonLines, newNode);
		}
		
		char* stringToWrite = formatListToStringLine(pokemonLines);
		int blocksRequired = cuantosBloquesOcupa(stringToWrite);
		char* stringLength = string_itoa(strlen(stringToWrite));

		if (freeBlocks > blocksRequired) {
			// Necesito pedir bloques
			if (blocksRequired > list_size(listBlocks)) {
				int extraBlocksNeeded = blocksRequired - list_size(listBlocks);
				t_list* extraBlocks = requestFreeBlocks(extraBlocksNeeded);
				// Agrego los nuevos bloques en la lista original
				list_add_all(listBlocks, extraBlocks);
				list_destroy(extraBlocks);
			} 
			writeBlocks(stringToWrite, listBlocks);
			char* metadataBlocks = formatToMetadataBlocks(listBlocks);
			
			pthread_mutex_lock(&MUTEX_METADATA);
			updatePokemonMetadata(newPokemon->nombrePokemon, "N", stringLength, metadataBlocks, "N");
			pthread_mutex_unlock(&MUTEX_METADATA);

			log_info("Operacion NEW_POKEMON terminada correctamente");
			free(metadataBlocks);
		}
		else
		{
			gamecard_logger_error("No hay bloques disponibles. No se puede hacer la operacion");
		}

		list_destroy_and_destroy_elements(pokemonLines, freeBlockLine);
		free(stringToWrite);
		free(stringLength);
	}
	else
	{
		log_info("Archivo abierto, se procede a reintentar luego de %d segundos", gamecard_config->tiempo_de_reintento_operacion);
		sleep(tiempoReintentoOperacion);
		operateNewPokemonFile(newPokemon, completePath, freeBlocks);
	}

	free(pokemonMetadata.blocks);
	free(pokemonMetadata.isOpen);
}


t_list* operateGetPokemonFile(get_pokemon* getPokemon, char* completePath) {
	pokemonMetadata pokemonMetadata = readPokemonMetadata(completePath);
	t_list* res;

	if (string_equals_ignore_case(pokemonMetadata.isOpen, "N"))
	{
		gamecard_logger_info("El archivo no esta abierto por ningun proceso, se procede a abrir el mismo.");
		
		pthread_mutex_lock(&MUTEX_METADATA);
		updateOpenFileState(getPokemon->nombrePokemon, "Y");
		pthread_mutex_unlock(&MUTEX_METADATA);

		t_list* listBlocks = stringBlocksToList(pokemonMetadata.blocks);
		res = readPokemonLines(listBlocks);
		
		pthread_mutex_lock(&MUTEX_METADATA);
		updateOpenFileState(getPokemon->nombrePokemon, "N");
		pthread_mutex_unlock(&MUTEX_METADATA);

		gamecard_logger_info("Operacion GET_POKEMON terminada correctamente");
	}
	else
	{
		gamecard_logger_info("Archivo abierto, se procede a reintentar luego de %d segundos", gamecard_config->tiempo_de_reintento_operacion);
		sleep(gamecard_config->tiempo_de_reintento_operacion);
		operateGetPokemonFile(getPokemon, completePath);
	}

	free(pokemonMetadata.blocks);
	free(pokemonMetadata.isOpen);
	return res;
}

int operateCatchPokemonFile(catch_pokemon* catchPokemon, char* completePath)
{
	pokemonMetadata pokemonMetadata = readPokemonMetadata(completePath);
	int res = 0;

	if (string_equals_ignore_case(pokemonMetadata.isOpen, "N"))
	{
		game_card_logger_info("El archivo no esta abierto por ningun proceso, se procede a abrir el mismo.");
		
		pthread_mutex_lock(&MUTEX_METADATA);
		updateOpenFileState(catchPokemon->nombrePokemon, "Y");
		pthread_mutex_unlock(&MUTEX_METADATA);

		t_list* listBlocks = stringBlocksToList(pokemonMetadata.blocks);
		t_list* pokemonLines = readPokemonLines(listBlocks);

		if (coordinateExists(catchPokemon->posicionEjeX, catchPokemon->posicionEjeY, pokemonLines) == 1)
		{
			deletePokemonTotalIfCoordinateExist(catchPokemon, pokemonLines);
			char* stringToWrite = formatListToStringLine(pokemonLines);
			int blocksRequired = cuantosBloquesOcupa(stringToWrite);
			char* stringLength = string_itoa(strlen(stringToWrite));

			if (strlen(stringToWrite) != 0)
			{
				if (blocksRequired == list_size(listBlocks))
				{
					writeBlocks(stringToWrite, listBlocks);
					char* metadataBlocks = formatToMetadataBlocks(listBlocks);
					
					pthread_mutex_lock(&MUTEX_METADATA);
					updatePokemonMetadata(catchPokemon->nombrePokemon, "N", stringLength, metadataBlocks, "N");
					pthread_mutex_unlock(&MUTEX_METADATA);
					free(metadataBlocks);
				}

				if (blocksRequired < list_size(listBlocks))
				{
					int lastBlockUsing = list_get(listBlocks, list_size(listBlocks) - 1 );
					list_remove(listBlocks, list_size(listBlocks) - 1);
					writeBlocks(stringToWrite, listBlocks);
					char* metadataBlocks = formatToMetadataBlocks(listBlocks);
					
					
					pthread_mutex_lock(&MUTEX_METADATA);
					updatePokemonMetadata(catchPokemon->nombrePokemon, "N", stringLength, metadataBlocks, "N");
					pthread_mutex_unlock(&MUTEX_METADATA);
					
					// Limpio estructuras que ya no uso
					setear_bloque_libre_en_posicion(bitmap, lastBlockUsing);
					fclose(fopen(obtenerPathDelNumeroDeBloque(lastBlockUsing), "w"));
					free(metadataBlocks);
				}
			} 

			// Edge case donde el pokemon tiene una sola linea, un solo bloque asignado y la unica coordenada es == 1
			// Asumo que el bloque se queda ocupado pero con size = 0
			if (strlen(stringToWrite) == 0 && list_size(pokemonLines) == 0)
			{
				int blockUsed = list_get(listBlocks, 0);
				char* metadataBlocks = formatToMetadataBlocks(listBlocks);
				char* zeroLength = string_itoa(0);

				pthread_mutex_lock(&MUTEX_METADATA);
				updatePokemonMetadata(catchPokemon->nombrePokemon, "N", zeroLength, metadataBlocks, "N");
				pthread_mutex_unlock(&MUTEX_METADATA);
					
				// Limpio estructuras que ya no uso
				fclose(fopen(obtenerPathDelNumeroDeBloque(blockUsed), "w"));
				free(zeroLength);
				free(metadataBlocks);
			}
			res = 1;
			gamecard_logger_info("Operacion CATCH_POKEMON terminada correctamente");

			free(stringToWrite);
			free(stringLength);
		}
		else
		{
			gamecard_logger_error("No existen las coordenadas para ese pokemon, no se puede completar la operacion.");
		}

		list_destroy_and_destroy_elements(pokemonLines, freeBlockLine);
	}
	else
	{
		gamecard_logger_info("Archivo abierto, se procede a reintentar luego de %d segundos", gamecard_config->tiempo_de_reintento_operacion);
		sleep(gamecard_config->tiempo_de_reintento_operacion);
		operateCatchPokemonFile(catchPokemon, completePath);
	}

	free(pokemonMetadata.blocks);
	free(pokemonMetadata.isOpen);

	return res;
}//Ver que falta
