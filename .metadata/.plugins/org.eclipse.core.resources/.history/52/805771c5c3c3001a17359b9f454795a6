#include "gamecard_setup.h"

t_log* log;
void createRootFiles() {
	char* dir_tallGrass = string_new();
	string_append(&dir_tallGrass, gamecard_config->punto_montaje_tallgrass);

	char* dir_metadata = string_new();
	string_append(&dir_metadata, gamecard_config->punto_montaje_tallgrass);
	string_append(&dir_metadata, "Metadata/");
	
	char* archivos = string_new();
	string_append(&archivos, gamecard_config->punto_montaje_tallgrass);
	string_append(&archivos, "Files/");

	char* dir_bloques = string_new();
	string_append(&dir_bloques, gamecard_config->punto_montaje_tallgrass);
	string_append(&dir_bloques, "Bloques/");

	if(_mkpath(gamecard_config->punto_montaje_tallgrass, 0755) == -1) {
		game_card_logger_error("_mkpath");
	} else {
		// Creo carpetas
		mkdir(dir_metadata, 0777);
		game_card_logger_info("Creada carpeta Metadata/");
		mkdir(archivos, 0777);
		game_card_logger_info("Creada carpeta Files/");
		game_card_logger_info("Creada carpeta Files/ %s", dir_bloques);
		mkdir(dir_bloques, 0777);
		game_card_logger_info("Creada carpeta Bloques/");
	}

	struct_paths[METADATA] = dir_metadata;
	struct_paths[FILES] = archivos;
	struct_paths[BLOCKS] = dir_bloques;
	struct_paths[TALL_GRASS] = dir_tallGrass;
}

void setupMetadata() {
	char* metadataBin = string_new();
	char* bitmapBin = string_new();

	string_append(&metadataBin, struct_paths[METADATA]);
	string_append(&metadataBin, "Metadata.bin");

	if(access(metadataBin, F_OK) != -1) {
        readMetaData(metadataBin);
    } else {
        createMetaDataFile(metadataBin);
        readMetaData(metadataBin);
    }
	
	string_append(&bitmapBin, struct_paths[METADATA]);
	string_append(&bitmapBin, "Bitmap.bin");

	if(access(bitmapBin, F_OK) != -1){
        readBitmap(bitmapBin);
    } else {
        // Creo bloques + bitmap
        createBitmap(bitmapBin);
        readBitmap(bitmapBin);
        createBlocks();
    }

	free(metadataBin);
	free(bitmapBin);
}


void setupFilesDirectory() {
	char* pokemonBasePath = string_new();
	char* pokemonBaseBin = string_new();
	string_append(&pokemonBasePath, struct_paths[FILES]);
	string_append(&pokemonBasePath, "Pokemon/");

	struct_paths[POKEMON] = pokemonBasePath;	

	mkdir(pokemonBasePath, 0777);
	
	string_append(&pokemonBaseBin, pokemonBasePath);
	string_append(&pokemonBaseBin, "Metadata.bin");

	FILE* pokemonMetadata = fopen(pokemonBaseBin, "w+b");
	t_config* pokemonConfigMetadata = config_create(pokemonBaseBin);
	config_set_value(pokemonConfigMetadata, "DIRECTORY", "Y");
	config_save(pokemonConfigMetadata);
	game_card_logger_info("Creado directorio base /Pokemon y su Metadata.bin");
	fclose(pokemonMetadata);

	free(pokemonBasePath);
	free(pokemonBaseBin);
}

void createBlocks(){
	game_card_logger_info("Creando bloques en el path /Bloques");
	FILE* newBloque;
	for(int i=0; i <= lfsMetaData.blocks-1; i++){
        char* pathBloque = obtenerPathDelNumeroDeBloque(i);
        newBloque = fopen(pathBloque,"w+b");
        fclose(newBloque);
		free(pathBloque);
    }
}

void createBitmap(char* bitmapBin) {
	game_card_logger_info("Creando el Bitmap.bin por primera vez");
	bitmap_file = fopen(bitmapBin, "wb+");
	char* bitarray_limpio_temp = calloc(1, ceiling(lfsMetaData.blocks, 8));
	fwrite((void*) bitarray_limpio_temp, ceiling(lfsMetaData.blocks, 8), 1, bitmap_file);
	fflush(bitmap_file);
	free(bitarray_limpio_temp);
}

void createMetaDataFile(char* metadataBin){
	game_card_logger_info("Creando Metadata.bin por primera vez");
	FILE* metadata = fopen(metadataBin, "w+b");
	config_metadata = config_create(metadataBin);
	config_set_value(config_metadata, "BLOCK_SIZE", "64");
	config_set_value(config_metadata, "BLOCKS", "4096"); // asi no tengo 5492 bloques :P
	config_set_value(config_metadata, "MAGIC_NUMBER", "TALL_GRASS");
	config_save(config_metadata);
	config_destroy(config_metadata);
	fclose(metadata);
}

void readMetaData(char* metadataPath) {
	game_card_logger_info("Leyendo Metadata.bin");
	t_config* metadataFile = config_create(metadataPath);
	lfsMetaData.blocks = config_get_int_value(metadataFile,"BLOCKS");
    lfsMetaData.magicNumber = string_duplicate(config_get_string_value(metadataFile,"MAGIC_NUMBER"));
	lfsMetaData.blockSize = config_get_int_value(metadataFile,"BLOCK_SIZE");
	config_destroy(metadataFile);
}

void readBitmap(char* bitmapBin) {
	game_card_logger_info("Leyendo Bitmap.bin");
	bitmap_file = fopen(bitmapBin, "rb+");
	fseek(bitmap_file, 0, SEEK_END);
	int file_size = ftell(bitmap_file);
	fseek(bitmap_file, 0, SEEK_SET);
	char* bitarray_str = (char*) mmap(NULL, file_size, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_SHARED, fileno(bitmap_file), 0);
	if(bitarray_str == (char*) -1)
	{
		game_card_logger_error("Fallo el mmap: %s", strerror(errno));
	}
	fread((void*) bitarray_str, sizeof(char), file_size, bitmap_file);
	bitmap = bitarray_create_with_mode(bitarray_str, file_size, MSB_FIRST);
}
void chequear_existencia_directorio(char* path) {
	int resultado = mkdir(path, 0700);
	if(resultado){
		if(errno == EEXIST){ //Si el error fue que encontro el directorio, continua
			log_debug(log, "Se encontró el directorio: \"%s\". !\n", path);
		} else { //Hubo otro error
			log_error(log, "Hubo un error al encontrar el directorio: \"%s\". !\n", path);
			exit(4);
		}
	} else { //No se creó, entonces hubo un error
		log_error(log, "No se encontró el directorio: \"%s\".\n", path);
		rmdir(path); //Como creé el directorio, lo borro para no dejarlo
		exit(3);
	}
}
void chequear_existencia_archivo(char* path) {
	if(access(path, F_OK) != -1) {
		log_debug(log, "Se encontró el archivo: \"%s\". !\n");
	} else{
		log_error(log, "Hubo un error al encontrar el archivo: \"%s\". !\n");
		exit(5);
	}
}
char *buscar_path(char *root, char *path){
	char *new_directory = string_new();
	string_append(&new_directory, root);
	string_append(&new_directory, path);
	return new_directory;
}
void chequear_metadata(char* root_directory){
	chequear_existencia_directorio(root_directory);
	char* metadata_directory = buscar_path(root_directory, "\Metadata");
	chequear_existencia_directorio(metadata_directory);
	char* metadata_metadata_archive = buscar_path(metadata_directory, "\Metadata.bin");
	chequear_existencia_archivo(metadata_metadata_archive);
	char* files_directory = buscar_path(root_directory, "\Files");
	chequear_existencia_directorio(files_directory);
	char* metadata_files_archive = buscar_path(files_directory, "\Metadata.bin");
	chequear_existencia_archivo(metadata_files_archive);
	char* blocks_directory = buscar_path(root_directory, "\Blocks");
	chequear_existencia_directorio(blocks_directory);
	log_info(log, "Se encontraron todos los archivos de Tall Grass.\n");
	printf("Se encontraron todos los archivos de Tall Grass");
}
void corroborar_existencia(void* resultado) {
	if(resultado == NULL) {
		log_error(log, "Error con resultado NULL");
		exit(7);
	}
}
char* metadata_key_string(char* memoria, int size_memoria, char* key) {
	char* resultado = malloc(sizeof(char*));
	int i, j;
	for(i = 0; i < size_memoria; i++){
		for(j = 0; memoria[i] == key[j]; j++){
			i++;
		}
		if(j == strlen(key)) {
			i++;
			int k;
			for (k = 0; (memoria[i] != '\n') && (memoria[i] != '\0') && (memoria[i] != EOF); k++) {
				resultado[k] = memoria[i];
				i++;
			}
			resultado[k] = '\0';
			return resultado;
		}
	}
	return NULL;
}
uint32_t metadata_key_int(char* memoria, int size_memoria, char* key) {
	char* buscado_en_string = metadata_key_string(memoria, size_memoria, key);
	corroborar_existencia(buscado_en_string);
	return atoi(buscado_en_string);
}
void leer_metadata(char* root) {
	char* metadata_archive_path = buscar_path(root, "\Metadata\Metadata.bin");
	struct stat fb;
	int fd = open(metadata_archive_path, O_RDONLY);
	fstat(fd, &fb);
	char* memoria = mmap(NULL, fb.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
	Metadata_LFS* tall_grass = malloc(sizeof(t_header));
	tall_grass->block_size = metadata_key_int(memoria, fb.st_size, "BLOCK_SIZE");
	tall_grass->blocks = metadata_key_int(memoria, fb.st_size, "BLOCKS");
	tall_grass->magic_number = metadata_key_string(memoria, fb.st_size, "MAGIC_NUMBER");
	corroborar_existencia(tall_grass->block_size);
	log_info(log, "HEADER\nBLOCK SIZE = %d\nBLOCKS = %d\nMAGIC NUMBER = %s\n", tall_grass->block_size, tall_grass->blocks, tall_grass->magic_number);
	if(munmap(memoria, fb.st_size) == -1){
		printf("Hubo un error cerrando el mapeo de memoria");
		log_error(log, "Hubo un error cerrando el mapeo de memoria");
		exit(6);
	}
	close(fd);
}
void leer_bitmap(char* root) {
	char* metadata_bitmap = buscar_path(root, "\Metadata\Bitmap.bin");
	struct stat fb;
	int fd = open(metadata_bitmap, O_RDONLY);
	char* bitmap_mmap = mmap(NULL, fb.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
	if(bitmap_mmap == NULL){
		log_info(log, "El bitmap está vacío");
		//Chequear si es un error
	}
	t_bitarray* bitmap = bitarray_create(bitmap_mmap, fb.st_size);
	//Terminar
}


