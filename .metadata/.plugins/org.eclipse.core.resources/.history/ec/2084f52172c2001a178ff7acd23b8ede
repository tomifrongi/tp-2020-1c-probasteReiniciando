/*
 ============================================================================
 Name        : Game-Card.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include "GameCard.h"

pthread_mutex_t mutexLogger;
t_config* config;

int main(void)
{
	if (init_log() < 0)
	{
		return EXIT_FAILURE;
	}
	gamecard_init();
	gamecard_exit();

	return EXIT_SUCCESS;

}

void gamecard_init()
{
	gamecard_logger_info("Se empieza a iniciar el GAMECARD...");
	init_log();
	init_config();
	gcfsCreateStructs();

	pthread_attr_t attrs;
	pthread_attr_init(&attrs);
	pthread_attr_setdetachstate(&attrs, PTHREAD_CREATE_JOINABLE);
	pthread_t thread1;
	pthread_t thread2;
	pthread_t thread3;
	t_queue new_queue;
	t_queue catch_queue;
	t_queue get_queue;

	gamecard_logger_info("Se crea un hilo para subscribirse a NEW_POKEMON del BROKER%d");
	new_queue = NEW;
	pthread_create(&thread1, NULL, (void*)gm_retry_connection, (void*)&new_queue);
	pthread_detach(thread1);
	usleep(600000);

	gamecard_logger_info("Se crea un hilo para subscribirse a CATCH_POKEMON del BROKER%d");
	new_queue = CATCH;
	pthread_create(&thread2, NULL, (void*)gm_retry_connection, (void*)&catch_queue);
	pthread_detach(thread2);
	usleep(600000);

	gamecard_logger_info("Se crea un hilo para subscribirse a GET_POKEMON del BROKER%d");
	new_queue = GET;
	pthread_create(&thread3, NULL, (void*)gm_retry_connection, (void*)&get_queue);
	pthread_detach(thread3);
	usleep(600000);

	gamecard_logger_info("Se crea un hilo para poner al Módulo GAMECARD en modo Servidor");
	gm_server();
	usleep(600000);
	for(;;);
}

void gm_retry_connection(void*arg)
{
	void* res = arg;
	while(true)
	{
		is_conn = false; //is_conn es un valor booleano
		subscribe(res);
		utils_delay(gamecard_config->tiempo_de_reintento_conexion);
	}
}

void subscribe(void*arg)
{
	t_queue* queue = *((int *) arg);
	int new_broker_fd = socket_connect_to_server(gamecard_config->ip_broker, gamecard_config->puerto_broker);

	if(new_broker_fd < 0)
	{
		gamecard_logger_warn("No se pudo conectar la cola %d con el BROKER", queue);
		socket_close_conection(new_broker_fd);
	}
	else
	{

		gamecard_logger_info("La conexion de la cola %d con el BROKER se hizo!", queue);
		t_suscripcion* sub = malloc(sizeof(t_suscripcion));
		t_protocolo subscribe_protocol = SUBSCRIBE; //RARI, ver esto
		sub->ip = string_duplicate(gamecard_config->ip_game_card);
		sub->puerto = gamecard_config->puerto_game_card;
		sub->proceso = GAMECARD;
		sub->cola = queue;
		utils_serialize_and_send(new_broker_fd, subscribe_protocol, sub);
		recv_game_card(new_broker_fd, 0);
		is_conn = true;
	}
}

void gm_server()
{
	int gm_socket = socket_create_listener(gamecard_config->ip_game_card, gamecard_config->puerto_game_card);
	if (gm_socket < 0)
	{
		gamecard_logger_error("Error al levantar GAMECARD Server");
	}

	game_card_logger_info("El Server se creó OK. Esperando la conexion del GAMEBOY");
	struct sockaddr_in info_client;
	socklen_t addrlen = sizeof info_client;
	pthread_attr_t attrs;
	pthread_attr_init(&attrs);
	pthread_attr_setdetachstate(&attrs, PTHREAD_CREATE_JOINABLE);
	int accepted_fd;
	for (;;) {
		pthread_t thread1;
		if ((accepted_fd = accept(gm_socket,(struct sockaddr *) &info_client, &addrlen)) != -1)
		{
			t_handle_connection* conn_handler = malloc(sizeof(t_handle_connection));
			conn_handler->fd = accepted_fd;
			conn_handler->bool_val = 1;
			pthread_create(&thread1, NULL, (void*) handle_conn,(void*) conn_handler);
			pthread_detach(thread1);
			game_card_logger_info("Creando un hilo para atender una conexión en el socket %d",accepted_fd);
			usleep(500000);
		}
		else
		{
			gamecard_logger_error("Error al conectarse con un Cliente");
		}
	}
}

static void *handle_conn(void *arg)
{
	t_handle_connection* connect_handler = (t_handle_connection *) arg;
	int client_fd = connect_handler->fd;
	recv_gamecard(client_fd, connect_handler->bool_val);
	return NULL;
}

void *msg_recv_to_gamecard(int fd, int respond_to) {
	int received_bytes;
	int protocol;
	int client_fd = fd;

	// 1 = Receives from GB; 0 = Receives from Broker
	int is_server = respond_to;

	while (true) {
		received_bytes = recv(client_fd, &protocol, sizeof(int), 0);

		if (received_bytes <= 0) {
			gamecard_logger_error("¡¡Error al recibir mensaje!!");
			return NULL;
		}
		switch (protocol) {

		// From Broker or GB
		case NEW_POKEMON: {
			game_card_logger_info("NEW received");
			t_new_pokemon *new_receive = utils_receive_and_deserialize(client_fd, protocol);
			game_card_logger_info("ID recibido: %d", new_receive->id);
			game_card_logger_info("ID Correlacional: %d", new_receive->id_correlacional);
			game_card_logger_info("Cantidad: %d", new_receive->cantidad);
			game_card_logger_info("Nombre Pokemon: %s", new_receive->nombre_pokemon);
			game_card_logger_info("Largo Nombre: %d", new_receive->tamanio_nombre);
			game_card_logger_info("Posicion X: %d", new_receive->pos_x);
			game_card_logger_info("Posicion Y: %d", new_receive->pos_y);
			createNewPokemon(new_receive);
			usleep(100000);


			pthread_attr_t attrs;
			pthread_attr_init(&attrs);
			pthread_attr_setdetachstate(&attrs, PTHREAD_CREATE_JOINABLE);

			if (is_server == 0) {
				pthread_t tid;
				pthread_create(&tid, NULL, (void*) send_ack,
						(void*) &new_receive->id_correlacional);
				pthread_detach(tid);
			}

			pthread_t tid1;
			pthread_create(&tid1, NULL, (void*) process_new_and_send_appeared,
					(void*) new_receive);
			pthread_detach(tid1);

			break;
		}

			// From broker or GB
		case GET_POKEMON: {
			game_card_logger_info("GET received");
			t_get_pokemon *get_rcv = utils_receive_and_deserialize(client_fd, protocol);
			game_card_logger_info("ID correlacional: %d", get_rcv->id_correlacional);
			game_card_logger_info("Nombre Pokemon: %s", get_rcv->nombre_pokemon);
			game_card_logger_info("Largo nombre: %d", get_rcv->tamanio_nombre);
			getAPokemon(get_rcv);
			usleep(50000);

			// To broker
			pthread_attr_t attrs;
			pthread_attr_init(&attrs);
			pthread_attr_setdetachstate(&attrs, PTHREAD_CREATE_JOINABLE);

			if (is_server == 0) {
				pthread_t tid2;
				pthread_create(&tid2, NULL, (void*) send_ack,
						(void*) &get_rcv->id_correlacional);
				pthread_detach(tid2);
			}

			pthread_t tid3;
			pthread_create(&tid3, NULL, (void*) process_get_and_send_localized,
					(void*) get_rcv);
			pthread_detach(tid3);

			break;
		}

			// From broker or GB
		case CATCH_POKEMON: {
			game_card_logger_info("CATCH received");
			t_catch_pokemon *catch_rcv = utils_receive_and_deserialize(client_fd, protocol);
			game_card_logger_info("ID correlacional: %d", catch_rcv->id_correlacional);
			game_card_logger_info("Nombre Pokemon: %s", catch_rcv->nombre_pokemon);
			game_card_logger_info("Largo nombre: %d",catch_rcv->tamanio_nombre);
			game_card_logger_info("Posicion X: %d", catch_rcv->pos_x);
			game_card_logger_info("Posicion Y: %d", catch_rcv->pos_y);
			catchAPokemon(catch_rcv);
			usleep(50000);

			// To Broker
			pthread_attr_t attrs;
			pthread_attr_init(&attrs);
			pthread_attr_setdetachstate(&attrs, PTHREAD_CREATE_JOINABLE);

			if (is_server == 0) {
				pthread_t tid4;
				pthread_create(&tid4, NULL, (void*) send_ack,
						(void*) &catch_rcv->id_correlacional);
				pthread_detach(tid4);
			}

			pthread_t tid5;

			pthread_create(&tid5, NULL, (void*) process_catch_and_send_caught,
					(void*) catch_rcv);
			pthread_detach(tid5);
			break;
		}

		default:
			break;
		}
	}
}

void send_ack(void* arg) {
	int id = *((int*) arg);

	t_ack* ack_snd = malloc(sizeof(t_ack));
	t_protocol ack_protocol = ACK;
	ack_snd->id = id;
	int client_fd = socket_connect_to_server(game_card_config->ip_broker,
			game_card_config->puerto_broker);
	if (client_fd > 0) {
		utils_serialize_and_send(client_fd, ack_protocol, ack_snd);
		game_card_logger_info("ACK SENT TO BROKER");
	}
	game_card_logger_info("CONNECTION WITH BROKER WILL BE CLOSED");
	socket_close_conection(client_fd);
}

void process_new_and_send_appeared(void* arg) {
	t_new_pokemon* new_receive = (t_new_pokemon*) arg;

	// Process New and send Appeared to broker
	t_appeared_pokemon* appeared_snd = malloc(sizeof(t_appeared_pokemon));
	t_protocol appeared_protocol = APPEARED_POKEMON;
	appeared_snd->nombre_pokemon = new_receive->nombre_pokemon;
	appeared_snd->tamanio_nombre = new_receive->tamanio_nombre;
	appeared_snd->id_correlacional = new_receive->id_correlacional;
	appeared_snd->pos_x = new_receive->pos_x;
	appeared_snd->pos_y = new_receive->pos_y;
	appeared_snd->cantidad = new_receive->cantidad;
	int client_fd = socket_connect_to_server(game_card_config->ip_broker,
			game_card_config->puerto_broker);
	if (client_fd > 0) {
		utils_serialize_and_send(client_fd, appeared_protocol, appeared_snd);
		game_card_logger_info("APPEARED sent to BROKER");
	}
	usleep(500000);
	game_card_logger_info("CLOSING CONNECTION WITH BROKER");
	socket_close_conection(client_fd);
}

void process_get_and_send_localized(void* arg) {
	t_get_pokemon* get_rcv = (t_get_pokemon*) arg;

	// Temporal mock for list (to return @LOCALIZED)
	t_list* positions = list_create();
	t_position *pos = malloc(sizeof(t_position));
	pos->pos_x = 21;
	pos->pos_y = 8;
	t_position *pos2 = malloc(sizeof(t_position));
	pos2->pos_x = 2;
	pos2->pos_y = 8;
	list_add(positions, pos);
	list_add(positions, pos2);

	// Process get and sent localize
	t_localized_pokemon* loc_snd = malloc(sizeof(t_localized_pokemon));
	loc_snd->id_correlacional = get_rcv->id_correlacional;
	loc_snd->nombre_pokemon = get_rcv->nombre_pokemon;
	loc_snd->tamanio_nombre = strlen(loc_snd->nombre_pokemon) + 1;
	loc_snd->cant_elem = list_size(positions);
	loc_snd->posiciones = positions;
	t_protocol localized_protocol = LOCALIZED_POKEMON;

	int client_fd = socket_connect_to_server(game_card_config->ip_broker,
			game_card_config->puerto_broker);
	if (client_fd > 0) {
		utils_serialize_and_send(client_fd, localized_protocol, loc_snd);
		game_card_logger_info("LOCALIZED sent to BROKER");
	}
	usleep(50000);
	socket_close_conection(client_fd);
}

void process_catch_and_send_caught(void* arg) {
	t_catch_pokemon* catch_rcv = (t_catch_pokemon*) arg;

	// Process Catch and send Caught to broker
	t_caught_pokemon* caught_snd = malloc(sizeof(t_caught_pokemon));
	caught_snd->id_correlacional = catch_rcv->id_correlacional;
	caught_snd->result = 1;
	t_protocol caught_protocol = CAUGHT_POKEMON;

	int client_fd = socket_connect_to_server(game_card_config->ip_broker,
			game_card_config->puerto_broker);
	if (client_fd > 0) {
		utils_serialize_and_send(client_fd, caught_protocol, caught_snd);
		game_card_logger_info("CAUGHT sent to BROKER");
	}
	usleep(500000);
	socket_close_conection(client_fd);
}

void game_card_exit() {
	socket_close_conection(game_card_fd);
	//gcfsFreeBitmaps();
	game_card_config_free();
	game_card_logger_destroy();

	free(struct_paths[METADATA]);
	free(struct_paths[FILES]);
	free(struct_paths[BLOCKS]);
	free(struct_paths[TALL_GRASS]);
}

/*void* handler_suscripciones(uint32_t cola){
	int socketBroker = connect_to_server(ip_broker, puerto_broker, NULL);
	t_message* message;
	void* content;
	int salida = 0;
	while(1){
		if(socketBroker != -errno){
			pthread_mutex_lock(&mutexLogger);
			log_info(log, "CONEXION EXITOSA CON EL BROKER");
			pthread_mutex_unlock(&mutexLogger);
			switch(cola){
				case NEW:{
					content = malloc(sizeof(uint32_t));
					uint32_t numero = NEW;
					memcpy (content, &numero, sizeof(uint32_t));
					send_message(socketBroker, SUSCRIPCION, content, sizeof(uint32_t));
					free(content);
					do{
						message = recv_message(socketBroker);
						if(message == -1 || message == 0){
							salida = 1;
						}else{
							void*aux=message->content;
							new_pokemon_enviar mensaje;
							memcpy(&mensaje.sizeNombre,aux,sizeof(uint32_t));
							aux += sizeof(uint32_t);
							memcpy(&mensaje.nombrePokemon,aux,mensaje.sizeNombre);
							aux += mensaje.sizeNombre;
							memcpy(&mensaje.cantidad,aux,sizeof(uint32_t));
							aux += sizeof(uint32_t);
							memcpy(&mensaje.posicionEjeX,aux,sizeof(uint32_t));
							aux += sizeof(uint32_t);
							memcpy(&mensaje.posicionEjeY,aux,sizeof(uint32_t));

							//Envio de ACK hay que agregarselo al broker
							send_message(socketBroker, CONFIRMACION, NULL, 0);

							//Empezar revision de archivos en FS

						}
					}while(salida != 1);
					salida = 0;
					free_t_message(message);
					break;
				}
				case CATCH:{
					content = malloc(sizeof(uint32_t));
					uint32_t numero = CATCH;
					memcpy (content, &numero, sizeof(uint32_t));
					send_message(socketBroker, SUSCRIPCION, content, sizeof(uint32_t));
					free(content);
					do{
						message = recv_message(socketBroker);
						if(message == -1 || message == 0){
							salida = 1;
						}else{
							void *aux = message->content;
							catch_pokemon_enviar mensaje;
							memcpy(&mensaje.sizeNombre,aux,sizeof(uint32_t));
							aux += sizeof(uint32_t);
							memcpy(&mensaje.nombrePokemon,aux,mensaje.sizeNombre);
							aux += mensaje.sizeNombre;
							memcpy(&mensaje.posicionEjeX,aux,sizeof(uint32_t));
							aux += sizeof(uint32_t);
							memcpy(&mensaje.posicionEjeY,aux,sizeof(uint32_t));

							//Envio de ACK hay que agregarselo al broker
							send_message(socketBroker, CONFIRMACION, NULL, 0);

							//Empezar revision de archivos en FS

						}
					}while(salida != 1);
					salida = 0;
					free_t_message(message);
					break;
				}
				case GET:{
					content = malloc(sizeof(uint32_t));
					uint32_t numero = GET;
					memcpy (content, &numero, sizeof(uint32_t));
					send_message(socketBroker, SUSCRIPCION, content, sizeof(uint32_t));
					free(content);
					do{
						message = recv_message(socketBroker);
						if(message == -1 || message == 0){
							salida = 1;
						}else{
							void *aux = message->content;
							get_pokemon_enviar mensaje;
							memcpy(&mensaje.sizeNombre,aux,sizeof(uint32_t));
							aux += sizeof(uint32_t);
							memcpy(mensaje.nombrePokemon,aux,mensaje.sizeNombre);

							//Envio de ACK hay que agregarselo al broker
							send_message(socketBroker, CONFIRMACION, NULL, 0);

							//Empezar revision de archivos en FS

						}
					}while(salida != 1);
					salida = 0;
					free_t_message(message);
					break;
				}
			}
		}
		socketBroker = connect_to_server(ip_broker, puerto_broker, NULL);
	}
	return NULL;
}*/
