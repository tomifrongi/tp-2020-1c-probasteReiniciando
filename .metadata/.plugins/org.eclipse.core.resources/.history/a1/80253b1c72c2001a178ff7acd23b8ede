/*
 ============================================================================
 Name        : Game-Card.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include "GameCard.h"

pthread_mutex_t mutexLogger;
t_config* config;

int main(void)
{
	if (init_log() < 0)
	{
		return EXIT_FAILURE;
	}
	gamecard_init();
	gamecard_exit();

	return EXIT_SUCCESS;

}

void gamecard_init()
{
	gamecard_logger_info("Se empieza a iniciar el GAMECARD...");
	init_log();
	init_config();
	gcfsCreateStructs();

	pthread_attr_t attrs;
	pthread_attr_init(&attrs);
	pthread_attr_setdetachstate(&attrs, PTHREAD_CREATE_JOINABLE);
	pthread_t thread1;
	pthread_t thread2;
	pthread_t thread3;
	t_queue new_queue;
	t_queue catch_queue;
	t_queue get_queue;

	gamecard_logger_info("Se crea un hilo para subscribirse a NEW_POKEMON del BROKER%d");
	new_queue = NEW;
	pthread_create(&thread1, NULL, (void*)gm_retry_connection, (void*)&new_queue);
	pthread_detach(thread1);
	usleep(600000);

	gamecard_logger_info("Se crea un hilo para subscribirse a CATCH_POKEMON del BROKER%d");
	new_queue = CATCH;
	pthread_create(&thread2, NULL, (void*)gm_retry_connection, (void*)&catch_queue);
	pthread_detach(thread2);
	usleep(600000);

	gamecard_logger_info("Se crea un hilo para subscribirse a GET_POKEMON del BROKER%d");
	new_queue = GET;
	pthread_create(&thread3, NULL, (void*)gm_retry_connection, (void*)&get_queue);
	pthread_detach(thread3);
	usleep(600000);

	gamecard_logger_info("Se crea un hilo para poner al Módulo GAMECARD en modo Servidor");
	gm_server();
	usleep(600000);
	for(;;);
}

void gm_retry_connection(void*arg)
{
	void* res = arg;
	while(true)
	{
		is_conn = false; //is_conn es un valor booleano
		subscribe(res);
		utils_delay(gamecard_config->tiempo_de_reintento_conexion);
	}
}

void subscribe(void*arg)
{
	t_queue* queue = *((int *) arg);
	int new_broker_fd = socket_connect_to_server(gamecard_config->ip_broker, gamecard_config->puerto_broker);

	if(new_broker_fd < 0)
	{
		gamecard_logger_warn("No se pudo conectar la cola %d con el BROKER", queue);
		socket_close_conection(new_broker_fd);
	}
	else
	{

		gamecard_logger_info("La conexion de la cola %d con el BROKER se hizo!", queue);
		t_suscripcion* sub = malloc(sizeof(t_suscripcion));
		t_protocolo subscribe_protocol = SUBSCRIBE; //RARI, ver esto
		sub->ip = string_duplicate(gamecard_config->ip_game_card);
		sub->puerto = gamecard_config->puerto_game_card;
		sub->proceso = GAMECARD;
		sub->cola = queue;
		utils_serialize_and_send(new_broker_fd, subscribe_protocol, sub);
		recv_game_card(new_broker_fd, 0);
		is_conn = true;
	}
}

void gm_server()
{
	int gm_socket = socket_create_listener(gamecard_config->ip_game_card, gamecard_config->puerto_game_card);
	if (gm_socket < 0)
	{
		gamecard_logger_error("Error al levantar GAMECARD Server");
	}

	game_card_logger_info("El Server se creó OK. Esperando la conexion del GAMEBOY");
	struct sockaddr_in info_client;
	socklen_t addrlen = sizeof info_client;
	pthread_attr_t attrs;
	pthread_attr_init(&attrs);
	pthread_attr_setdetachstate(&attrs, PTHREAD_CREATE_JOINABLE);
	int accepted_fd;
	for (;;) {
		pthread_t thread1;
		if ((accepted_fd = accept(gm_socket,(struct sockaddr *) &info_client, &addrlen)) != -1)
		{
			t_handle_connection* conn_handler = malloc(sizeof(t_handle_connection));
			conn_handler->fd = accepted_fd;
			conn_handler->bool_val = 1;
			pthread_create(&thread1, NULL, (void*) handle_conn,(void*) conn_handler);
			pthread_detach(thread1);
			game_card_logger_info("Creando un hilo para atender una conexión en el socket %d",accepted_fd);
			usleep(500000);
		}
		else
		{
			gamecard_logger_error("Error al conectarse con un Cliente");
		}
	}
}

static void *handle_conn(void *arg)
{
	t_handle_connection* connect_handler = (t_handle_connection *) arg;
	int client_fd = connect_handler->fd;
	recv_gamecard(client_fd, connect_handler->bool_val);
	return NULL;
}



/*void* handler_suscripciones(uint32_t cola){
	int socketBroker = connect_to_server(ip_broker, puerto_broker, NULL);
	t_message* message;
	void* content;
	int salida = 0;
	while(1){
		if(socketBroker != -errno){
			pthread_mutex_lock(&mutexLogger);
			log_info(log, "CONEXION EXITOSA CON EL BROKER");
			pthread_mutex_unlock(&mutexLogger);
			switch(cola){
				case NEW:{
					content = malloc(sizeof(uint32_t));
					uint32_t numero = NEW;
					memcpy (content, &numero, sizeof(uint32_t));
					send_message(socketBroker, SUSCRIPCION, content, sizeof(uint32_t));
					free(content);
					do{
						message = recv_message(socketBroker);
						if(message == -1 || message == 0){
							salida = 1;
						}else{
							void*aux=message->content;
							new_pokemon_enviar mensaje;
							memcpy(&mensaje.sizeNombre,aux,sizeof(uint32_t));
							aux += sizeof(uint32_t);
							memcpy(&mensaje.nombrePokemon,aux,mensaje.sizeNombre);
							aux += mensaje.sizeNombre;
							memcpy(&mensaje.cantidad,aux,sizeof(uint32_t));
							aux += sizeof(uint32_t);
							memcpy(&mensaje.posicionEjeX,aux,sizeof(uint32_t));
							aux += sizeof(uint32_t);
							memcpy(&mensaje.posicionEjeY,aux,sizeof(uint32_t));

							//Envio de ACK hay que agregarselo al broker
							send_message(socketBroker, CONFIRMACION, NULL, 0);

							//Empezar revision de archivos en FS

						}
					}while(salida != 1);
					salida = 0;
					free_t_message(message);
					break;
				}
				case CATCH:{
					content = malloc(sizeof(uint32_t));
					uint32_t numero = CATCH;
					memcpy (content, &numero, sizeof(uint32_t));
					send_message(socketBroker, SUSCRIPCION, content, sizeof(uint32_t));
					free(content);
					do{
						message = recv_message(socketBroker);
						if(message == -1 || message == 0){
							salida = 1;
						}else{
							void *aux = message->content;
							catch_pokemon_enviar mensaje;
							memcpy(&mensaje.sizeNombre,aux,sizeof(uint32_t));
							aux += sizeof(uint32_t);
							memcpy(&mensaje.nombrePokemon,aux,mensaje.sizeNombre);
							aux += mensaje.sizeNombre;
							memcpy(&mensaje.posicionEjeX,aux,sizeof(uint32_t));
							aux += sizeof(uint32_t);
							memcpy(&mensaje.posicionEjeY,aux,sizeof(uint32_t));

							//Envio de ACK hay que agregarselo al broker
							send_message(socketBroker, CONFIRMACION, NULL, 0);

							//Empezar revision de archivos en FS

						}
					}while(salida != 1);
					salida = 0;
					free_t_message(message);
					break;
				}
				case GET:{
					content = malloc(sizeof(uint32_t));
					uint32_t numero = GET;
					memcpy (content, &numero, sizeof(uint32_t));
					send_message(socketBroker, SUSCRIPCION, content, sizeof(uint32_t));
					free(content);
					do{
						message = recv_message(socketBroker);
						if(message == -1 || message == 0){
							salida = 1;
						}else{
							void *aux = message->content;
							get_pokemon_enviar mensaje;
							memcpy(&mensaje.sizeNombre,aux,sizeof(uint32_t));
							aux += sizeof(uint32_t);
							memcpy(mensaje.nombrePokemon,aux,mensaje.sizeNombre);

							//Envio de ACK hay que agregarselo al broker
							send_message(socketBroker, CONFIRMACION, NULL, 0);

							//Empezar revision de archivos en FS

						}
					}while(salida != 1);
					salida = 0;
					free_t_message(message);
					break;
				}
			}
		}
		socketBroker = connect_to_server(ip_broker, puerto_broker, NULL);
	}
	return NULL;
}*/
