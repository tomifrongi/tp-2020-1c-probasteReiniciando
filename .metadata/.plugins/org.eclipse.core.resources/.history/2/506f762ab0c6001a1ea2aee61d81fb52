#ifndef FILE_SYSTEM_GAME_CARD_FILE_SYSTEM_H_
#define FILE_SYSTEM_GAME_CARD_FILE_SYSTEM_H_

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <errno.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <commons/config.h>
#include <commons/bitarray.h>
#include <commons/collections/list.h>
#include "bloque_handler.h"
#include "gm_handler.h"
#include "Gamecard.h"
#include "gm_metadata.h"

//------------------------ESTRUCTURAS-----------------------------------------------------------//

pthread_mutex_t MUTEX_METADATA;

//--------------------------------------FUNCIONES---------------------------------------------------------------------//
char* formatToMetadataBlocks(t_list* blocks);

void updatePokemonMetadata(const char* fullPath, const char* directory, const char* size, const char* blocks, const char* open);
int createRecursiveDirectory(const char* path);
int createFile(const char* fullPath);
void initSemaphore();

void createNewPokemon(new_pokemon* newPokemon);
t_list* getAPokemon(get_pokemon* getPokemon);
int catchAPokemon(catch_pokemon* catchPokemon);

void operateNewPokemonFile(new_pokemon* newPokemon, char* completePath, int freeBlocks);
t_list* operateGetPokemonFile(get_pokemon* getPokemon, char* completePath);
int operateCatchPokemonFile(catch_pokemon* catchPokemon, char* completePath);

int coordinateExists(unsigned int posX, unsigned int posY, t_list* pokemonLines);
void addTotalPokemonIfCoordinateExist(new_pokemon* newPokemon, t_list* pokemonLines);
void deletePokemonTotalIfCoordinateExist(catch_pokemon* catchPokemon, t_list* pokemonLines);
t_list* requestFreeBlocks(int extraBlocksNeeded);

int calcualarBloques(int tamanio);
int cuantosBloquesOcupa(char* value);
char* crearPathBloque(int bloque, char* montajeBloques);
void updateOpenFileState(const char* fullPath, const char* open);

void gcfsCreateStructs();
void gcfsFreeBitmaps();
void freeBlockLine(blockLine* newLineBlock);
#endif /* FILE_SYSTEM_GAME_CARD_FILE_SYSTEM_H_ */
